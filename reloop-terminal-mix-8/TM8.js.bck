function TerminalMix() {}

// ----------   Customization variables ----------
// Push the 'RANGE' button at the top edge of the pitch fader to
// cycle through the following pitch ranges. Edit the array to choose
// the ranges you need. For example '0.08' means +/-8%
TerminalMix.pitchRanges = [ 0.08, 0.12, 0.25, 0.5, 1.0 ];

// ----------   Other global variables    ----------
TerminalMix.timers = [];
TerminalMix.state = [];
TerminalMix.faderStart = [];
TerminalMix.lastFader = [];   // Last value of each channel/cross fader
TerminalMix.lastEQs = [[]];
TerminalMix.traxKnobMode = "tracks";
TerminalMix.shifted = false;
TerminalMix.shiftedL = false;
TerminalMix.shiftedR = false;
TerminalMix.loopMovePressedL = false;
TerminalMix.loopMovePressedR = false;

// ----------   Functions   ----------

TerminalMix.init = function (id,debug) {
    TerminalMix.id = id;

    // Extinguish all LEDs
    for (var i=0; i<=3; i++) {  // 4 decks
        for (var j=1; j<=120; j++) {
            midi.sendShortMsg(0x90+i,j,0x00);
        }
    }

    // New mapping of FX units using midi-components-0.0.js
    // EffectUnits 1 & 3. Usage:
    // new components.EffectUnit([int list EffUnit numbers], bool allowFocusWhenParametersHidden)
    TerminalMix.effectUnit13 = new components.EffectUnit([1,3]);
    TerminalMix.effectUnit13.enableButtons[1].midi = [0x90, 0x1A];
    TerminalMix.effectUnit13.enableButtons[2].midi = [0x90, 0x1B];
    TerminalMix.effectUnit13.enableButtons[3].midi = [0x90, 0x1C];
    TerminalMix.effectUnit13.knobs[1].midi = [0xB0, 0x1A];
    TerminalMix.effectUnit13.knobs[2].midi = [0xB0, 0x1B];
    TerminalMix.effectUnit13.knobs[3].midi = [0xB0, 0x1C];
    TerminalMix.effectUnit13.dryWetKnob.midi = [0xB0, 0x1D];
    TerminalMix.effectUnit13.dryWetKnob.input = function (channel, control, value, status, group) {
        if (value === 63) {
          this.inSetParameter(this.inGetParameter() - .07);
        } else if (value === 65) {
          this.inSetParameter(this.inGetParameter() + .07);
        }
    };
    TerminalMix.effectUnit13.effectFocusButton.midi = [0x90, 0x1E];
    TerminalMix.effectUnit13.init();

    // EffectUnits 2 & 4
    TerminalMix.effectUnit24 = new components.EffectUnit([2,4]);
    TerminalMix.effectUnit24.enableButtons[1].midi = [0x91, 0x1A];
    TerminalMix.effectUnit24.enableButtons[2].midi = [0x91, 0x1B];
    TerminalMix.effectUnit24.enableButtons[3].midi = [0x91, 0x1C];
    TerminalMix.effectUnit24.knobs[1].midi = [0xB1, 0x1A];
    TerminalMix.effectUnit24.knobs[2].midi = [0xB1, 0x1B];
    TerminalMix.effectUnit24.knobs[3].midi = [0xB1, 0x1C];
    TerminalMix.effectUnit24.dryWetKnob.midi = [0xB1, 0x1D];
    TerminalMix.effectUnit24.dryWetKnob.input = function (channel, control, value, status, group) {
        if (value === 63) {
          this.inSetParameter(this.inGetParameter() - .07);
        } else if (value === 65) {
          this.inSetParameter(this.inGetParameter() + .07);
        }
    };
    TerminalMix.effectUnit24.effectFocusButton.midi = [0x91, 0x1E];
    TerminalMix.effectUnit24.init();

}

TerminalMix.shutdown = function () {
    // Stop all timers
    for (var i=0; i<TerminalMix.timers.length; i++) {
        engine.stopTimer(TerminalMix.timers[i]);
    }
    // Extinguish all LEDs
    for (var i=0; i<=3; i++) {  // 4 decks
        for (var j=1; j<=120; j++) {
            midi.sendShortMsg(0x90+i,j,0x00);
        }
    }
    print ("Reloop TerminalMix: "+TerminalMix.id+" shut down.");
}


// The button that enables/disables scratching
TerminalMix.wheelTouch = function (channel, control, value, status, group) {
    var deck = script.deckFromGroup(group);
    if (value == 0x7F) {
        var alpha = 1.0/8;
        var beta = alpha/32;
        engine.scratchEnable(deck, 800, 33+1/3, alpha, beta);
    }
    else {    // If button up
        engine.scratchDisable(deck);
    }
}

// The wheel that actually controls the scratching
TerminalMix.wheelTurn = function (channel, control, value, status, group) {
    var deck = script.deckFromGroup(group);
    var newValue=(value-64);
    // See if we're scratching. If not, do wheel jog.
    if (!engine.isScratching(deck)) {
        engine.setValue(group, "jog", newValue/4);
        return;
    }

    // Register the movement
    engine.scratchTick(deck,newValue);
}

// Left shift button
TerminalMix.shiftButtonL = function (channel, control, value, status, group) {
  if (value === 127) {
    TerminalMix.effectUnit13.shift();
    TerminalMix.effectUnit24.shift();
    TerminalMix.shifted = true;
    TerminalMix.shiftedL = true;
  } else {
    TerminalMix.effectUnit13.unshift();
    TerminalMix.effectUnit24.unshift();
    TerminalMix.shifted = false;
    TerminalMix.shiftedL = false;
  }
};

// Right shift button
TerminalMix.shiftButtonR = function (channel, control, value, status, group) {
  if (value === 127) {
    TerminalMix.effectUnit13.shift();
    TerminalMix.effectUnit24.shift();
    TerminalMix.shifted = true;
    TerminalMix.shiftedR = true;
  } else {
    TerminalMix.effectUnit13.unshift();
    TerminalMix.effectUnit24.unshift();
    TerminalMix.shifted = false;
    TerminalMix.shiftedR = false;
  }
}

